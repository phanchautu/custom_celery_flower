/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@aws-sdk/s3-request-presigner@3.705.0/dist-cjs/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";var __defProp=Object.defineProperty,__getOwnPropDesc=Object.getOwnPropertyDescriptor,__getOwnPropNames=Object.getOwnPropertyNames,__hasOwnProp=Object.prototype.hasOwnProperty,__name=(e,r)=>__defProp(e,"name",{value:r,configurable:!0}),__export=(e,r)=>{for(var t in r)__defProp(e,t,{get:r[t],enumerable:!0})},__copyProps=(e,r,t,n)=>{if(r&&"object"==typeof r||"function"==typeof r)for(let s of __getOwnPropNames(r))__hasOwnProp.call(e,s)||s===t||__defProp(e,s,{get:()=>r[s],enumerable:!(n=__getOwnPropDesc(r,s))||n.enumerable});return e},__toCommonJS=e=>__copyProps(__defProp({},"__esModule",{value:!0}),e),src_exports={};__export(src_exports,{S3RequestPresigner:()=>S3RequestPresigner,getSignedUrl:()=>getSignedUrl}),module.exports=__toCommonJS(src_exports);var import_util_format_url=require("@aws-sdk/util-format-url"),import_middleware_endpoint=require("@smithy/middleware-endpoint"),import_protocol_http=require("@smithy/protocol-http"),import_signature_v4_multi_region=require("@aws-sdk/signature-v4-multi-region"),UNSIGNED_PAYLOAD="UNSIGNED-PAYLOAD",SHA256_HEADER="X-Amz-Content-Sha256",_S3RequestPresigner=class{constructor(e){const r={service:e.signingName||e.service||"s3",uriEscapePath:e.uriEscapePath||!1,applyChecksum:e.applyChecksum||!1,...e};this.signer=new import_signature_v4_multi_region.SignatureV4MultiRegion(r)}presign(e,{unsignableHeaders:r=new Set,hoistableHeaders:t=new Set,unhoistableHeaders:n=new Set,...s}={}){return this.prepareRequest(e,{unsignableHeaders:r,unhoistableHeaders:n,hoistableHeaders:t}),this.signer.presign(e,{expiresIn:900,unsignableHeaders:r,unhoistableHeaders:n,...s})}presignWithCredentials(e,r,{unsignableHeaders:t=new Set,hoistableHeaders:n=new Set,unhoistableHeaders:s=new Set,...i}={}){return this.prepareRequest(e,{unsignableHeaders:t,unhoistableHeaders:s,hoistableHeaders:n}),this.signer.presignWithCredentials(e,r,{expiresIn:900,unsignableHeaders:t,unhoistableHeaders:s,...i})}prepareRequest(e,{unsignableHeaders:r=new Set,unhoistableHeaders:t=new Set,hoistableHeaders:n=new Set}={}){r.add("content-type"),Object.keys(e.headers).map((e=>e.toLowerCase())).filter((e=>e.startsWith("x-amz-server-side-encryption"))).forEach((e=>{n.has(e)||t.add(e)})),e.headers[SHA256_HEADER]=UNSIGNED_PAYLOAD;const s=e.headers.host,i=e.port,o=`${e.hostname}${null!=e.port?":"+i:""}`;(!s||s===e.hostname&&null!=e.port)&&(e.headers.host=o)}};__name(_S3RequestPresigner,"S3RequestPresigner");var S3RequestPresigner=_S3RequestPresigner,getSignedUrl=__name((async(e,r,t={})=>{var n,s,i;let o,a;if("function"==typeof e.config.endpointProvider){const t=null==(s=null==(n=(await(0,import_middleware_endpoint.getEndpointFromInstructions)(r.input,r.constructor,e.config)).properties)?void 0:n.authSchemes)?void 0:s[0];a="sigv4a"===(null==t?void 0:t.name)?null==(i=null==t?void 0:t.signingRegionSet)?void 0:i.join(","):null==t?void 0:t.signingRegion,o=new S3RequestPresigner({...e.config,signingName:null==t?void 0:t.signingName,region:async()=>a})}else o=new S3RequestPresigner(e.config);const d=__name(((e,r)=>async e=>{const{request:n}=e;if(!import_protocol_http.HttpRequest.isInstance(n))throw new Error("Request to be presigned is not an valid HTTP request.");let s;delete n.headers["amz-sdk-invocation-id"],delete n.headers["amz-sdk-request"],delete n.headers["x-amz-user-agent"];const i={...t,signingRegion:t.signingRegion??r.signing_region??a,signingService:t.signingService??r.signing_service};return s=r.s3ExpressIdentity?await o.presignWithCredentials(n,r.s3ExpressIdentity,i):await o.presign(n,i),{response:{},output:{$metadata:{httpStatusCode:200},presigned:s}}}),"presignInterceptMiddleware"),p=e.middlewareStack.clone();p.addRelativeTo(d,{name:"presignInterceptMiddleware",relation:"before",toMiddleware:"awsAuthMiddleware",override:!0});const l=r.resolveMiddleware(p,e.config,{}),{output:u}=await l({input:r.input}),{presigned:g}=u;return(0,import_util_format_url.formatUrl)(g)}),"getSignedUrl");
//# sourceMappingURL=/sm/ca02a4d2d53d2e0871cdf6339df4587e4cc015b471bef27400ec1278171cc91d.map